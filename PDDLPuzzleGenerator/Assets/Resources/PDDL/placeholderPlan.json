////////////// PROBLEM

(define (problem problem0) (:objects key1 door1 -element ;rooms room1 room2 room3 room4 room5 -location ;obstacles jump shoot grab -Obstacle ) (:init (uninitialized door1) (uninitialized key1) (notDup jump grab) (notDup shoot jump) (notDup grab shoot) ;Initialize (empty room1) (empty room2) (empty room3) (empty room4) ) (:goal (and (not(uninitialized door1)) (not(uninitialized key1)) (easy room2) (mid room3) ) ) )


/////////// DOMAIN


(define (domain domain4)
    (:requirements
        :strips :equality :typing
    )
    (:predicates
        (at ?e -element ?l -location)
        (spawned ?obs -obstacle ?location -location)
        (uninitialized ?e -element)
        (used ?l -location)
        (empty ?l -location)
        (easy ?location -location)
        (mid ?location -location)
        (hard ?location -location)
        (notDup ?obs1 -obstacle ?obs2 -obstacle)
    )
(:types element location obstacle)

(:action add_element
    :parameters
        (?element1 ?element2 -element ?location -location)
    :precondition
        (and
            (uninitialized ?element1)
            (uninitialized ?element2)
            (not(at ?element1 ?location))
            (not(at ?element2 ?location))
            (empty ?location)
        )
    :effect
        (and
            (at ?element1 ?location)
            (not(uninitialized ?element1))
            (not(empty ?location))
        )
)

(:action add_Room
    :parameters(?location -location)
    :precondition
        (and
        (empty ?location)
        )
    :effect
        (and
           (not(empty ?location))
        )
)

(:action add_obstacle
    :parameters(?obs1 -obstacle ?location -location)
    :precondition
        (and
        (not (at door1 ?location))
        
        )
    :effect
        (and
            (spawned ?obs1 ?location)
        )
)


(:action create_easyRoom
    :parameters (?obs1 -obstacle ?obs2 -obstacle ?l -location)
    :precondition
        (and
        (spawned ?obs1 ?l)
        (spawned ?obs2 ?l)
        (not (empty ?l))
        )
    :effect
        (and
            (easy ?l)    
        )
)

(:action create_midRoom
    :parameters (?obs1 -obstacle ?obs2 -obstacle ?obs3 -obstacle ?l -location)
    :precondition
        (and
        (spawned ?obs1 ?l)
        (spawned ?obs2 ?l)
        (notDup ?obs1 ?obs2)
        (spawned ?obs3 ?l)
        (not (empty ?l))
        )
    :effect
        (and
            (mid ?l)    
        )
)

(:action create_hardRoom
    :parameters (?obs1 -obstacle ?obs2 -obstacle ?obs3 -obstacle ?l -location)
    :precondition
        (and
        (notDup ?obs1 ?obs2)
        (notDup ?obs2 ?obs3)
        (spawned ?obs1 ?l)
        (spawned ?obs2 ?l)
        (spawned ?obs3 ?l)
        (not (empty ?l))
        )
    :effect
        (and
            (hard ?l)    
        )
)

)
